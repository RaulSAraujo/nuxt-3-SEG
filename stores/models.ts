import type { RouteLocationNormalizedLoaded } from "#vue-router";

export const useModelStore = defineStore("models", () => {
    const modelMap = ref<{ [key: string]: string }>({
        "register-warehouse": 'ErpWarehouse',
        'register-product': 'Product',
        'register-product-sell': 'ProductSell',
        'register-supplier': 'Supplier',
        'register-device': 'Apparatus',
        'register-device-classification-apparatus': 'ClassificationApparatus',
        'register-client': 'clients',
        'register-package': 'Package',
        'register-validate-image': 'ValidateProductsImage',
        'register-saved-rma-id-apparatus': 'SavedApparatusRma',
        'register-saved-rma-id-products': 'SavedProductsRma',
        'purchase-order': 'PurchaseControl',
        'purchase-order-import': 'ImportOrders',
        'purchase-quotation': 'QuotationPack',
        'purchase-request': 'PurchaseRequest',
        'purchase-insumos': 'InputMaterials',
        'purchase-saved-rma': 'SavedRma',
        'purchase-order-ml': 'OrdersFinalityStockMl',
        'purchase-receipt': 'Receivement',
        'purchase-pending-price': 'PurchaseControlProduct',
        'purchase-validate-price-ml': 'ValidatePricePercentage',
        'purchase-validate-stock-virtual': 'ValidateVirtualStock',
        'sale-shipping-validation': 'ShippingValidation',
        'sale-order': 'SalesOrder',
        'sale-verification-order': 'SalesOrdersSeparation',
        'sale-warranty': 'WarrantyRma',
        'sale-shipping-verification': 'SalesOrder',
        'sale-sell-device': 'SellDevice',
        'service-order': 'ServiceOrder',
        'service-cash-control': 'ReceptionCashControl',
        'service-crm': 'Crm',
        'stock-storage-location': 'ErpProductStock',
        'stock-product-loan': 'ProductLoan',
        'stock-separation-log': 'OrderPicking',
        'stock-product-label': 'StockTagControl',
        'stock-parts-collection-management': 'PartsCollectionManagement',
        'expedition-check-out': 'SalesOrder',
        'expedition-check-out-history': 'SalesOrder',
        'expedition-cut-time': 'CarrierCutTime',
        'expedition-shipping-urgency': 'ShippingUrgency',
        'manager-pendency': 'Pendency',
        'manager-tax-stock': 'TaxStock',
        'integration-sync-errors': 'ProductSyncErrors',
        'option-index-supplier-passwords': 'SupplierPasswords',
        'option-index-supplier-passwords-log': 'SupplierPasswordsLogs',
        'option-index-notifications-config': 'NotificationsConfig',
        'option-index-city': 'City',
        'option-index-region': 'Region',
        'option-index-limit-date': 'LimitDatePurchaseControl',
        'option-index-product-template': 'TemplateConfig',
        'option-index-table-price-desk': 'TablePrice',
        'option-index-printer': 'PrintersSettings',
        'option-index-shipment': 'ShipmentOrders',
        'option-index-permission': 'Group',
        'option-index-grid-filter': 'CustomFilters',
        'option-index-system': 'ManageSystem',
        'option-index-company': 'Companies',
        'option-index-invoicing': 'InvoiceRule',
        'option-index-user': 'User',
        'option-index-log-access': 'LoginLog',
        'option-index-access': 'UsersAccessList',
        'support-request': 'SupportRequest',
    });

    function findModelName() {
        const { name }: RouteLocationNormalizedLoaded = useRoute();

        return modelMap.value[name!.toString()];
    };

    return { findModelName };
})